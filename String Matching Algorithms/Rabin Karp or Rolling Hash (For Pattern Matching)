#include<bits/stdc++.h>
using namespace std; 
#define ll long long

class RabinKarp {
    const ll MOD1 = 1e9 + 7; // First modulus for hashing
    const ll MOD2 = 1e9 + 9; // Second modulus for hashing
    const ll P1 = 31;        // First prime base for hashing
    const ll P2 = 37;        // Second prime base for hashing

    // Hash function to assign a unique value to each character
    ll charValue(char c) {
        if (c >= 'a' && c <= 'z') return c - 'a' + 1; // 'a' -> 1, 'b' -> 2, ..., 'z' -> 26
        if (c >= 'A' && c <= 'Z') return c - 'A' + 27; // 'A' -> 27, 'B' -> 28, ..., 'Z' -> 52
        return 0; // Handle other characters if needed
    }

public:
    // Function to find occurrences of the pattern `pat` in the text `txt`
    vector<ll> search(const string &txt, const string &pat) {
        ll n = txt.size();
        ll m = pat.size();

        if (m > n) {
            return {}; // Pattern cannot be larger than text
        }

        // Precompute powers of P1 and P2 up to the size of the text
        vector<ll> powP1(n), powP2(n);
        powP1[0] = 1;
        powP2[0] = 1;
        for (ll i = 1; i < n; i++) {
            powP1[i] = (powP1[i - 1] * P1) % MOD1;
            powP2[i] = (powP2[i - 1] * P2) % MOD2;
        }

        // Compute the hash value for the pattern `pat` using both moduli
        ll patHash1 = 0, patHash2 = 0;
        for (ll i = 0; i < m; i++) {
            patHash1 = (patHash1 + charValue(pat[i]) * powP1[i]) % MOD1;
            patHash2 = (patHash2 + charValue(pat[i]) * powP2[i]) % MOD2;
        }

        // Compute the prefix hashes for the text `txt`
        vector<ll> prefixHash1(n + 1, 0), prefixHash2(n + 1, 0);
        for (ll i = 0; i < n; i++) {
            prefixHash1[i + 1] = (prefixHash1[i] + charValue(txt[i]) * powP1[i]) % MOD1;
            prefixHash2[i + 1] = (prefixHash2[i] + charValue(txt[i]) * powP2[i]) % MOD2;
        }

        // Find all occurrences of the pattern
        vector<ll> result;
        for (ll i = 0; i <= n - m; i++) {
            ll currHash1 = (prefixHash1[i + m] + MOD1 - prefixHash1[i]) % MOD1;
            ll currHash2 = (prefixHash2[i + m] + MOD2 - prefixHash2[i]) % MOD2;
            ll expectedHash1 = (patHash1 * powP1[i]) % MOD1;
            ll expectedHash2 = (patHash2 * powP2[i]) % MOD2;

            // Match if both hashes match
            if (currHash1 == expectedHash1 && currHash2 == expectedHash2) {
                result.push_back(i); // Match found at index `i`
            }
        }

        return result;
    }
};

signed main() {
    // Example usage of the RabinKarp class
    RabinKarp k;

    string txt = "arajaarajjraj";
    string pat = "raj";

    // Finding pattern matches
    vector<ll> matches = k.search(txt, pat);
    cout << "Pattern found at indices: ";
    for (int idx : matches) {
        cout << idx << " ";
    }
    cout << endl;

    return 0;
}

#ifdef ONLINE_JUDGE
#include<bits/stdc++.h>
#endif
#pragma GCC optimize("O3,unroll-loops")
#include<iostream>
#include<algorithm>
#include<cstdlib>
#include<ctime>
#include<vector>
#include<map>
#include<set>
#include<deque>
#include<stack>
#include<queue>
using namespace std;

/*-----------------------For Preventing Plagarism------------------------------*/
template <typename T>
class Modular {
 public:
  using Type = typename decay<decltype(T::value)>::type;
 
  constexpr Modular() : value() {}
  template <typename U>
  Modular(const U& x) {
    value = normalize(x);
  }
 
  template <typename U>
  static Type normalize(const U& x) {
    Type v;
    if (-mod() <= x && x < mod()) v = static_cast<Type>(x);
    else v = static_cast<Type>(x % mod());
    if (v < 0) v += mod();
    return v;
  }
 
  const Type& operator()() const { return value; }
  template <typename U>
  explicit operator U() const { return static_cast<U>(value); }
  constexpr static Type mod() { return T::value; }
 
  Modular& operator+=(const Modular& other) { if ((value += other.value) >= mod()) value -= mod(); return *this; }
  Modular& operator-=(const Modular& other) { if ((value -= other.value) < 0) value += mod(); return *this; }
  template <typename U> Modular& operator+=(const U& other) { return *this += Modular(other); }
  template <typename U> Modular& operator-=(const U& other) { return *this -= Modular(other); }
  Modular& operator++() { return *this += 1; }
  Modular& operator--() { return *this -= 1; }
  Modular operator++(int) { Modular result(*this); *this += 1; return result; }
  Modular operator--(int) { Modular result(*this); *this -= 1; return result; }
  Modular operator-() const { return Modular(-value); }
 
  template <typename U = T>
  typename enable_if<is_same<typename Modular<U>::Type, int>::value, Modular>::type& operator*=(const Modular& rhs) {
    value = normalize(static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value));
    return *this;
  }
  template <typename U = T>
  typename enable_if<is_same<typename Modular<U>::Type, long long>::value, Modular>::type& operator*=(const Modular& rhs) {
    long long q = static_cast<long long>(static_cast<long double>(value) * rhs.value / mod());
    value = normalize(value * rhs.value - q * mod());
    return *this;
  }
  template <typename U = T>
  typename enable_if<!is_integral<typename Modular<U>::Type>::value, Modular>::type& operator*=(const Modular& rhs) {
    value = normalize(value * rhs.value);
    return *this;
  }
 
  Modular& operator/=(const Modular& other) { return *this *= Modular(inverse(other.value, mod())); }
 
  friend const Type& abs(const Modular& x) { return x.value; }
 
  template <typename U>
  friend bool operator==(const Modular<U>& lhs, const Modular<U>& rhs);
 
  template <typename U>
  friend bool operator<(const Modular<U>& lhs, const Modular<U>& rhs);
 
  template <typename V, typename U>
  friend V& operator>>(V& stream, Modular<U>& number);
 
 private:
  Type value;
};
 
template <typename T> bool operator==(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value == rhs.value; }
template <typename T, typename U> bool operator==(const Modular<T>& lhs, U rhs) { return lhs == Modular<T>(rhs); }
template <typename T, typename U> bool operator==(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) == rhs; }
 
template <typename T> bool operator!=(const Modular<T>& lhs, const Modular<T>& rhs) { return !(lhs == rhs); }
template <typename T, typename U> bool operator!=(const Modular<T>& lhs, U rhs) { return !(lhs == rhs); }
template <typename T, typename U> bool operator!=(U lhs, const Modular<T>& rhs) { return !(lhs == rhs); }
 
template <typename T> bool operator<(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value < rhs.value; }
 
template <typename T> Modular<T> operator+(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }
template <typename T, typename U> Modular<T> operator+(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) += rhs; }
template <typename T, typename U> Modular<T> operator+(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }
 
template <typename T> Modular<T> operator-(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }
template <typename T, typename U> Modular<T> operator-(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) -= rhs; }
template <typename T, typename U> Modular<T> operator-(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }
 
template <typename T> Modular<T> operator*(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }
template <typename T, typename U> Modular<T> operator*(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) *= rhs; }
template <typename T, typename U> Modular<T> operator*(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }
 
template <typename T> Modular<T> operator/(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }
template <typename T, typename U> Modular<T> operator/(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) /= rhs; }
template <typename T, typename U> Modular<T> operator/(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }
 
template<typename T, typename U>
Modular<T> power(const Modular<T>& a, const U& b) {
  assert(b >= 0);
  Modular<T> x = a, res = 1;
  U p = b;
  while (p > 0) {
    if (p & 1) res *= x;
    x *= x;
    p >>= 1;
  }
  return res;
}
 
template <typename T>
bool IsZero(const Modular<T>& number) {
  return number() == 0;
}
 
template <typename T>
string to_string(const Modular<T>& number) {
  return to_string(number());
}
 
// U == std::ostream? but done this way because of fastoutput
template <typename U, typename T>
U& operator<<(U& stream, const Modular<T>& number) {
  return stream << number();
}
 
// U == std::istream? but done this way because of fastinput
template <typename U, typename T>
U& operator>>(U& stream, Modular<T>& number) {
  typename common_type<typename Modular<T>::Type, long long>::type x;
  stream >> x;
  number.value = Modular<T>::normalize(x);
  return stream;
}
using i64 = long long;

template <typename T>
struct TPoint {
  T x;
  T y;
  int id;
 
  TPoint() : x(0), y(0), id(-1) {}
  TPoint(const T& x_, const T& y_) : x(x_), y(y_), id(-1) {}
  TPoint(const T& x_, const T& y_, int id_) : x(x_), y(y_), id(id_) {}
 
  static constexpr T eps = static_cast<T>(1e-9);
 
  inline TPoint operator+(const TPoint& rhs) const { return TPoint(x + rhs.x, y + rhs.y); }
  inline TPoint operator-(const TPoint& rhs) const { return TPoint(x - rhs.x, y - rhs.y); }
  inline TPoint operator*(const T& rhs) const { return TPoint(x * rhs, y * rhs); }
  inline TPoint operator/(const T& rhs) const { return TPoint(x / rhs, y / rhs); }
 
  friend T smul(const TPoint& a, const TPoint& b) {
    return a.x * b.x + a.y * b.y;
  }
 
  friend T vmul(const TPoint& a, const TPoint& b) {
    return a.x * b.y - a.y * b.x;
  }
 
  inline T abs2() const {
    return x * x + y * y;
  }
 
  inline bool operator<(const TPoint& rhs) const {
    return (y < rhs.y || (y == rhs.y && x < rhs.x));
  }
 
  inline bool is_upper() const {
    return (y > eps || (abs(y) <= eps && x > eps));
  }
 
  inline int cmp_polar(const TPoint& rhs) const {
    assert(abs(x) > eps || abs(y) > eps);
    assert(abs(rhs.x) > eps || abs(rhs.y) > eps);
    bool a = is_upper();
    bool b = rhs.is_upper();
    if (a != b) {
      return (a ? -1 : 1);
    }
    long long v = x * rhs.y - y * rhs.x;
    return (v > eps ? -1 : (v < -eps ? 1 : 0));
  }
};

template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.ff); cerr << ","; _print(p.ss); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}

class SGTree {
	vector<int> seg;
public:
	SGTree(int n) {
		seg.resize(4 * n + 1);
	}

	void build(int ind, int low, int high, int arr[]) {
		if (low == high) {
			seg[ind] = arr[low];
			return;
		}

		int mid = (low + high) / 2;
		build(2 * ind + 1, low, mid, arr);
		build(2 * ind + 2, mid + 1, high, arr);
		seg[ind] = min(seg[2 * ind + 1], seg[2 * ind + 2]);
	}

	int query(int ind, int low, int high, int l, int r) {
		// no overlap
		// l r low high or low high l r
		if (r < low || high < l) return INT_MAX;

		// complete overlap
		// [l low high r]
		if (low >= l && high <= r) return seg[ind];

		int mid = (low + high) >> 1;
		int left = query(2 * ind + 1, low, mid, l, r);
		int right = query(2 * ind + 2, mid + 1, high, l, r);
		return min(left, right);
	}
	void update(int ind, int low, int high, int i, int val) {
		if (low == high) {
			seg[ind] = val;
			return;
		}

		int mid = (low + high) >> 1;
		if (i <= mid) update(2 * ind + 1, low, mid, i, val);
		else update(2 * ind + 2, mid + 1, high, i, val);
		seg[ind] = min(seg[2 * ind + 1], seg[2 * ind + 2]);
	}
};

const int N=1e5;
int par[N][21];

// Stores the dept 
int dep[N];

// Stores the tree 
vector<int> g[N];

// Function to pre-compute DFS
void dfs(int v, int p = 0)
{

    // First parent
    par[v][0] = p;

    // Finds the parent at 2^i
    for (int i = 1; i <= 20; i++)
        par[v][i] = par[par[v][i - 1]][i - 1];

    // Call DFS function
    for (int i = 0; i < g[v].size(); i++) {
        int to = g[v][i];

        // Already visited
        if (to == p)
            continue;
        
        // Find the depth 
        dep[to] = dep[v] + 1;
        
        // Call the Dfs Function 
        dfs(to, v);
    }
}




// Function to find the lca of a and b 
int lca(int a, int b)
{

    // If a is higher than b then swap them 
    // Tree me a niche rahegi and b upar hamesha 
    if (dep[a] < dep[b])
        swap(a, b);

    // Make both of them at equal height 
    for (int i = 20; i >= 0; i--)
    {
        if (dep[a] - (1 << i) >= dep[b])
            a = par[a][i];
    }

    // Now traverse till up 
    // till we donot get parent same 
    for (int i = 20; i >= 0; --i)
    {
        if (par[a][i] != par[b][i])
        {
            a = par[a][i],
            b = par[b][i];
        }
    }
    
    // Till now not same 
    if (a != b)
        a = par[a][0];

    return a;
}

struct node
{
   int sum,prefixsum;
   int suffixsum,maxsum;
};
node tree[4*50010];
int arr[50010];
/*This function is used to build the 
segment tree*/
void build(int index,int start,int end)
{
   if(start == end)
   {
      tree[index].sum = arr[start];
      tree[index].prefixsum = arr[start];
      tree[index].suffixsum = arr[start];
      tree[index].maxsum = arr[start];
   }
   else
   {
      int mid = (start+end)/2;
      build(2*index+1,start,mid);
      build(2*index+2,mid+1,end);
      
      /*Note how we use the array to access the left 
      and right subtree*/
      tree[index].sum = 
         tree[2*index+1].sum + tree[2*index+2].sum;
      tree[index].prefixsum = max(tree[2*index+1].prefixsum,tree[2*index+1].sum + tree[2*index+2].prefixsum);
      tree[index].suffixsum = max(tree[2*index+2].suffixsum,tree[2*index+2].sum + tree[2*index+1].suffixsum);   
      tree[index].maxsum =  max(tree[index].prefixsum, max(tree[index].suffixsum, max(tree[2*index+1].maxsum,
                  max(tree[2*index+2].maxsum,
                     tree[2*index+1].suffixsum
                        +tree[2*index+2].prefixsum
                     )
                  )
               )
            );
   }
}
/*this function is used to return the result
for each query*/
node query(int index,int start,int end,int l,int r)
{
   node result;
   result.sum=result.prefixsum=INT_MIN;
   result.suffixsum=result.maxsum=INT_MIN;
   
   if(r<start || end<l)
      return result;
   if(l<=start && end<=r)   
      return tree[index];
   
   int mid = (start+end)/2;
   if (l > mid)
         return query(2*index+2, mid+1, end, l, r);
   if (r <= mid)
         return query(2*index+1, start, mid, l, r);
   
   node left = query(2*index+1,start,mid,l,r);
   node right = query(2*index+2,mid+1,end,l,r);
   
   result.sum = left.sum + right.sum;
   result.prefixsum = 
      max(left.prefixsum, left.sum + right.prefixsum);
   result.suffixsum = 
      max(right.suffixsum, right.sum + left.suffixsum);
   result.maxsum = 
      max(result.prefixsum, 
         max(result.suffixsum, 
            max(left.maxsum, 
               max(right.maxsum,
                  left.suffixsum + right.prefixsum))));
   return result;            
}

pair<int, int> bfs(int root,int n){
    vector<int> distt(n+1, 0);
    distt[root] = 1;
    queue<int> q;
    q.push(root);
    while(!q.empty()){
        int curr = q.front();
        for(auto it : g[curr]){
            if(distt[it] != 0){
                continue;
            }
            q.push(it);
            distt[it] = distt[curr] + 1;
        }
        q.pop();
    }
    int mx = INT_MIN, vertex = -1;
    for(int i=1 ; i<=n ; i++){
        if(mx < distt[i]){
            mx = distt[i];
            vertex = i;
        }
    }
    return make_pair(mx, vertex);
}

// C implementation of search and insert operations
// on Trie
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#define ARRAY_SIZE(a) sizeof(a)/sizeof(a[0])

// Alphabet size (# of symbols)
#define ALPHABET_SIZE (26)

// Converts key current character into index
// use only 'a' through 'z' and lower case
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')

// trie node
typedef struct TrieNode
{
	struct TrieNode *children[ALPHABET_SIZE];

	// isLeaf is true if the node represents
	// end of a word
	bool isLeaf;
}nd;

// Returns new trie node (initialized to NULLs)
struct TrieNode *getNode(void)
{
	struct TrieNode *pNode = NULL;

	pNode = (struct TrieNode *)malloc(sizeof(struct TrieNode));

	if (pNode)
	{
		int i;

		pNode->isLeaf = false;

		for (i = 0; i < ALPHABET_SIZE; i++)
			pNode->children[i] = NULL;
	}

	return pNode;
}

// If not present, inserts key into trie
// If the key is prefix of trie node, just marks leaf node
void insert(struct TrieNode *root, const char *key)
{
	int level;
	int length = strlen(key);
	int index;

	struct TrieNode *pCrawl = root;

	for (level = 0; level < length; level++)
	{
		index = CHAR_TO_INDEX(key[level]);
		if (!pCrawl->children[index])
			pCrawl->children[index] = getNode();

		pCrawl = pCrawl->children[index];
	}

	// mark last node as leaf
	pCrawl->isLeaf = true;
}

// Returns true if key presents in trie, else false
bool search(struct TrieNode *root, const char *key)
{
	int level;
	int length = strlen(key);
	int index;
	struct TrieNode *pCrawl = root;

	for (level = 0; level < length; level++)
	{
		index = CHAR_TO_INDEX(key[level]);

		if (!pCrawl->children[index])
			return false;

		pCrawl = pCrawl->children[index];
	}

	return (pCrawl != NULL && pCrawl->isLeaf);
}

vector<int> z_func(string s)
{
	int n = s.size(); 
	vector<int>z(n,0); 
	int l = 0, r = 0;

	// Iterate to create the Z function 
	for(int i = 1;i < n;i++)
	{

		// Copy till previous 
		// is does not exceeds range 
		if(i<=r)
			z[i] = min(r-i+1,z[i-l]); 
        
        // Re-start comparison 
		while(i + z[i] < n && s[z[i]] == s[i+z[i]])
		{
			z[i]++;
		}

		if(i+z[i]-1>r)
		{
			l = i; 
			r = i+z[i]-1; 
		}
	}
	return z;
}


const int MAX_N = 2e5 + 5;
const int MAX_VAL = 1e6 + 5;

int  Q, A[MAX_N];
long long ans[MAX_N];
struct query {
    int l, r, id;
} q[MAX_N];

int cnt[MAX_VAL];
long long cur;

inline void add(int x) {
    // cur += x * (cnt[x]++ << 1 | 1LL);
   // cout << cur << " ";  
	cur -= x*cnt[x]*cnt[x];
	cnt[x]++; 
	cur += x*cnt[x]*cnt[x]; 
}

inline void rem(int x) {
    //cur -= x * (--cnt[x] << 1 | 1LL);
    cur -= x*cnt[x]*cnt[x];
	cnt[x]--; 
	cur += x*cnt[x]*cnt[x]; 
}

void mo() {
    int bsize = sqrt(N) + 0.5;
    auto comp = [bsize](struct query &q1, struct query &q2) {
        int b1 = q1.l / bsize, b2 = q2.l / bsize;
        return b1 != b2 ? b1 < b2 : b1 & 1 ? q1.r < q2.r : q2.r < q1.r;
    };
    sort(q, q + Q, comp);
    
    int l = 1, r = 0;
    cur = 0;
    for(int i = 0; i < Q; i++) {

    	//cout << q[i].l << " " << q[i].r << "\n";
        while(l < q[i].l) rem(A[l++]);
        //cout << cur << endl;
        while(l > q[i].l) add(A[--l]);
        while(r < q[i].r) add(A[++r]);
        while(r > q[i].r) rem(A[r--]);
        //cout << endl;
        ans[q[i].id] = cur;
    }
}


/*------------------------------------------------------------------------------*/



/*-----------------------For Input & Output------------------------------*/
#define Code ios_base::sync_with_stdio(false);
#define By cin.tie(NULL);cout.tie(NULL); 
#define Nitesh05 ll t;cin>>t;for(ll i=1;i<=t;i++){solve(i);}
/*-----------------------------------------------------------------------*/


/*-------------------------For Saving Time----------------------------------------*/
#define ll long long
#define MOD 1000000007
#define MOD1 998244353
#define INF 1e18
#define pb push_back
#define ppb pop_back
#define pll pair<ll,ll>
#define mp make_pair
#define ff first
#define ss second
#define PI 3.141592653589793238462
#define sz(x) ((int)(x).size())
#define all(x) x.begin(),x.end()
#define rall(x) x.rbegin(),x.rend()
#define vll vector<ll>
#define vvll vector<vector<ll>>
#define vpll vector<pair<ll,ll>>
#define vb vector<bool>
#define vc vector<char>
#define mll map<ll,ll>
#define mcl map<char,ll>
#define debug(input) for(auto &i:input)cout<<i<<" ";
#define take(input) for(auto &i:input)cin>>i;
#define py cout<<"YES"<<endl;
#define pn cout<<"NO"<<endl;
#define nl cout<<endl;
#define cn continue;
#define maxi(a) *max_element(all(a))
#define mini(a) *min_element(all(a))
/*-----------------------------------------------------------------------*/

/*--------------------------Bit Manipulation Stuff------------------------------------------------------------------------------------------------*/
#define set_bits __builtin_popcountll
#define bitparity __builtin_parityll
#define leadingZeroBits __builtin_clzll
#define trailingZeroBits __builtin_ctzll
#define firstSetBit __builtin_ffsll
#define lastSetBit(x) (x&-x)
ll dtb(ll n) {ll binaryNumber = 0;ll placeValue = 1;while (n > 0) {int remainder = n % 2;binaryNumber += remainder * placeValue;placeValue *= 10;n /= 2;}return binaryNumber;}
ll btd(ll n) {ll decimalNumber = 0;ll base = 1;ll remainder;while (n > 0) {remainder = n % 10;decimalNumber += remainder * base;n /= 10;base *= 2;}return decimalNumber;}
ll ORinrange(ll left,ll right){while(left<right){left|=left+1;}return (left|right);}
bool isPowerOfTwo(ll n){if(n==0)return false;return (ceil(log2(n)) == floor(log2(n)));}
ll highestPowerOfTwo(ll n){ll ans=1,temp=2;while(temp<n){temp=temp<<1;if(temp>n)break;ans++;}return ans;}
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/


/*---------------------------------------Number Theory Stuff Below------------------------------------------------------------------------------------*/
ll gcd(ll a, ll b) {if (b > a) {return gcd(b, a);} if (b == 0) {return a;} return gcd(b, a % b);}
ll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}
void extendgcd(ll a, ll b, ll*v) {if (b == 0) {v[0] = 1; v[1] = 0; v[2] = a; return ;} extendgcd(b, a % b, v); ll x = v[1]; v[1] = v[0] - v[1] * (a / b); v[0] = x; return;} //pass an arry of size1 3
ll mminv(ll a, ll b) {ll arr[3]; extendgcd(a, b, arr); return arr[0];} //for non prime b
ll mminvprime(ll a, ll b) {return expo(a, b - 2, b);}
bool revsort(ll a, ll b) {return a > b;}
ll combination(ll n, ll r, ll m, ll *fact, ll *ifact) {ll val1 = fact[n]; ll val2 = ifact[n - r]; ll val3 = ifact[r]; return (((val1 * val2) % m) * val3) % m;}
void cse(int t) {cout << "Case " << t << ": ";}
vector<ll> sieve(int n) {int*arr = new int[n + 1](); vector<ll> vect; for (int i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (int j = 2 * i; j <= n; j += i)arr[j] = 1;} return vect;}
ll mod_add(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}
ll mod_mul(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}
ll mod_sub(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}
ll mod_div(ll a, ll b, ll m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}  //only for prime m
ll phin(ll n) {ll number = n; if (n % 2 == 0) {number /= 2; while (n % 2 == 0) n /= 2;} for (ll i = 3; i <= sqrt(n); i += 2) {if (n % i == 0) {while (n % i == 0)n /= i; number = (number / i * (i - 1));}} if (n > 1)number = (number / n * (n - 1)) ; return number;} //O(sqrt(N))
ll fact(ll n){if(n==0)return 1;return n*fact(n-1);}
bool isPrime(ll n){if(n<=1)return false;if(n<=3)return true;if(n%2==0||n%3==0)return false;for(int i=5;i*i<=n;i=i+6)if(n%i==0||n%(i+2)==0)return false;return true;}
bool isPerfectSquare(ll x){if (x >= 0) {ll sr = sqrt(x);return (sr * sr == x);}return false;}
/*----------------------------------------------------------------------------------------------------------------------------------------------------*/


/*--------------------------------------My Personal Functions--------------------------------------------------------------------------------------------------------------*/
void gc(ll n,ll maxi){unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();std::srand(seed);for (int i = 0; i < n; ++i) {cout<<(rand() % maxi) + 1<<" "; }cout<<endl;}
bool af(const std::vector<ll>& arr, ll value) {auto it = std::find(arr.begin(), arr.end(), value);return it != arr.end();}
bool anf(const std::vector<ll>& arr, ll value) {auto it = std::find(arr.begin(), arr.end(), value);return it == arr.end();}
bool strf(string s,char b){return s.find(b)!=string::npos;}
bool strnf(string s,char b){return s.find(b)!=string::npos;}
bool mf(map<ll,ll>&m,ll i){return m.find(i)!=m.end();}
bool mnf(map<ll,ll>&m,ll i){return m.find(i)==m.end();}
bool sf(set<ll>&s,ll i){return s.find(i)!=s.end();}
bool snf(set<ll>&s,ll i){return s.find(i)==s.end();}
bool isOdd(ll n){return n&1;}
bool isEven(ll n){return !(n&1);}
bool isSorted(vector<ll>&temp){for(ll i=0;i<temp.size()-1;i++){if(temp[i]>temp[i+1])return false;}return true;}
bool allSame(vll &a){for(ll i=0;i<a.size()-1;i++){if(a[i]!=a[i+1])return false;}return true;}
/*----------------------------------------------------------------------------------------------------------------------------------------------------*/


/*----------------------------------Solution of this Question-----------------------------------------------------------------------------------------*/

void solve(ll t){
   

}

/*----------------------------------------------------------------------------------------------------------------------------------------------------*/

/*--------------------------Main Function-------------------------*/
signed main(){
#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
#endif
   Code By Nitesh05
}
/*----------------------------------------------------------------*/

const int MOD = 1e9 + 7; 
const int MAX = 1e6; 

/*
1) Factorials and Binomial Coefficient Calculation
Efficient computation using factorials for cases when n<1e6.
*/

// Binary exponentiation
int bin_pow(int base, int exp, int mod) {
    int result = 1;
    while (exp > 0) {
        if (exp % 2 == 1) result = (result * base) % mod;
        base = (base * base) % mod;
        exp /= 2;
    }
    return result;
}

vector<int> fact(MAX + 1), inv_fact(MAX + 1);

void precompute_factorials() {
    fact[0] = 1;
    for (int i = 1; i <= MAX; i++) {
        fact[i] = (fact[i - 1] * i) % MOD;
    }

    inv_fact[MAX] = bin_pow(fact[MAX], MOD - 2, MOD); // Using Fermat's Little Theorem for modular inversion
    for (int i = MAX - 1; i >= 0; i--) {
        inv_fact[i] = (inv_fact[i + 1] * (i + 1)) % MOD;
    }
}


// nCr calculation using precomputed factorials
int nCr(int n, int r) {
    if (r > n) return 0;
    return (fact[n] * ((inv_fact[r] * inv_fact[n - r]) % MOD)) % MOD;
}

/*
2) Multiplication for Large 'r'
Efficient multiplication technique for cases when 'r' < 1e6.
*/

int multiplication(int n, int r) {
    int result = 1;
    for (int i = 0; i < r; i++) {
        result = (result * (n - i)) % MOD;
        result = (result * bin_pow(i + 1, MOD - 2, MOD)) % MOD; // Using modular inverse
    }
    return result;
}

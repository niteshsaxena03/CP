#ifdef ONLINE_JUDGE
#include<bits/stdc++.h>
#endif
#pragma GCC optimize("O3,unroll-loops")
#include<iostream>
#include<algorithm>
#include<cstdlib>
#include<ctime>
#include<vector>
#include<map>
#include<set>
#include<deque>
#include<stack>
#include<queue>
#include<unordered_set>
#include<utility>
#include <cassert>
#include <chrono>
#include <cmath>
#include <cstdint>
#include <cstring>
#include <functional>
#include <iomanip>
using namespace std;


/*-----------------------For Input & Output------------------------------*/
#define Code ios_base::sync_with_stdio(false);
#define By cin.tie(NULL);cout.tie(NULL); 
#define NiteshSaxena ll t;cin>>t;for(ll i=1;i<=t;i++){solve(i);}
/*-----------------------------------------------------------------------*/


/*-------------------------For Saving Time----------------------------------------*/
#define ll long long
#define int long long
#define MOD 1000000007
#define MOD1 998244353
#define INF 1e18
#define pb push_back
#define ppb pop_back
#define pll pair<ll,ll>
#define PI 3.141592653589793238462
#define all(x) x.begin(),x.end()
#define rall(x) x.rbegin(),x.rend()
#define vll vector<ll>
#define vvll vector<vector<ll>>
#define vpll vector<pair<ll,ll>>
#define vb vector<bool>
#define vc vector<char>
#define mll map<ll,ll>
#define mcll map<char,ll>
#define msll map<string,ll>
#define mcc map<char,char>
#define sll set<ll>
#define sc set<char>
#define stll stack<ll>
#define stc stack<char>
#define debug(input) for(auto &i:input)cout<<i<<" ";cout<<endl;
#define debugPair(input) for(auto &i:input)cout<<i.first<<" "<<i.second<<endl;
#define take(input) for(auto &i:input)cin>>i;
#define print(element) cout<<element<<endl;
/*-----------------------------------------------------------------------*/

/*--------------------------Bit Manipulation Stuff------------------------------------------------------------------------------------------------*/
#define set_bits __builtin_popcountll
#define bitparity __builtin_parityll
#define leadingZeroBits __builtin_clzll
#define trailingZeroBits __builtin_ctzll
#define firstSetBit __builtin_ffsll
#define lastSetBit(x) (x&-x)
ll dtb(ll n) {ll binaryNumber = 0;ll placeValue = 1;while (n > 0) {int remainder = n % 2;binaryNumber += remainder * placeValue;placeValue *= 10;n /= 2;}return binaryNumber;}
ll btd(ll n) {ll decimalNumber = 0;ll base = 1;ll remainder;while (n > 0) {remainder = n % 10;decimalNumber += remainder * base;n /= 10;base *= 2;}return decimalNumber;}
ll ORinrange(ll left,ll right){while(left<right){left|=left+1;}return (left|right);}
bool isPowerOfTwo(ll n){if(n==0)return false;return (ceil(log2(n)) == floor(log2(n)));}
ll highestPowerOfTwo(ll n){ll ans=1,temp=2;while(temp<n){temp=temp<<1;if(temp>n)break;ans++;}return ans;}
string dtb31(ll n) {bitset<31> binary(n);return binary.to_string();}
/*---------------------------------------------------------------------------------------------------------------------------------------------------*/


/*---------------------------------------Number Theory Stuff Below------------------------------------------------------------------------------------*/
ll gcd(ll a, ll b) {if (b > a) {return gcd(b, a);} if (b == 0) {return a;} return gcd(b, a % b);}
ll modExpo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}
void extendgcd(ll a, ll b, ll*v) {if (b == 0) {v[0] = 1; v[1] = 0; v[2] = a; return ;} extendgcd(b, a % b, v); ll x = v[1]; v[1] = v[0] - v[1] * (a / b); v[0] = x; return;} //pass an arry of size1 3
ll mminv(ll a, ll b) {ll arr[3]; extendgcd(a, b, arr); return arr[0];} //for non prime b
ll mminvprime(ll a, ll b) {return modExpo(a, b - 2, b);}
ll combination(ll n, ll r, ll m, ll *fact, ll *ifact) {ll val1 = fact[n]; ll val2 = ifact[n - r]; ll val3 = ifact[r]; return (((val1 * val2) % m) * val3) % m;}
void cse(int t) {cout << "Case #" << t << ": ";}
vector<ll> sieve(int n) {int*arr = new int[n + 1](); vector<ll> vect; for (int i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (int j = 2 * i; j <= n; j += i)arr[j] = 1;} return vect;}
ll mod_add(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}
ll mod_mul(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}
ll mod_sub(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}
ll mod_div(ll a, ll b, ll m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}  //only for prime m
ll phin(ll n) {ll number = n; if (n % 2 == 0) {number /= 2; while (n % 2 == 0) n /= 2;} for (ll i = 3; i <= sqrt(n); i += 2) {if (n % i == 0) {while (n % i == 0)n /= i; number = (number / i * (i - 1));}} if (n > 1)number = (number / n * (n - 1)) ; return number;} //O(sqrt(N))
ll inverseModulo(ll n){return modExpo(n,MOD-2,MOD);}
ll nCr(int n, int r) {if (r > n) return 0;if (r == 0 || n == r) return 1;double res = 0;for (int i = 0; i < r; i++) {res += log(n-i) - log(i+1);}return (int)round(exp(res));}
/*----------------------------------------------------------------------------------------------------------------------------------------------------*/

/*--------------------------------------My Personal Functions--------------------------------------------------------------------------------------------------------------*/
void gc(ll n,ll maxi){unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();std::srand(seed);for (int i = 0; i < n; ++i) {cout<<(rand() % maxi) + 1<<" "; }cout<<endl;}
/*----------------------------------------------------------------------------------------------------------------------------------------------------*/


/*----------------------------------Solution of this Question-----------------------------------------------------------------------------------------*/


void solve(int t) {
	
}


/*----------------------------------------------------------------------------------------------------------------------------------------------------*/

/*--------------------------Main Function-------------------------*/
signed main(){
#ifndef ONLINE_JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
#endif
   Code By NiteshSaxena
   //solve(1);
}
/*----------------------------------------------------------------*/
